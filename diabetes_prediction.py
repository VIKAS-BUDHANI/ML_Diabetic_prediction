# -*- coding: utf-8 -*-
"""under process Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15b2aR0I1V7GDq0jBKnpl2-CsjHnWpaXP
"""


import numpy
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pickle
import sklearn.metrics


diabetes_dataframe=pd.read_csv("diabetes.csv")

diabetes_dataframe.head()

diabetes_dataframe.shape
#we have 768 rows and 9 columns data

diabetes_dataframe.describe()

"""Data Preprocessing
    
"""

diabetes_dataframe.isnull().sum()
#detacting the missising values in dataframe
print('No of missing values in Glucose: ', diabetes_dataframe[diabetes_dataframe['Glucose'] == 0].shape[0])
print('No of missing values in BloodPressure: ', diabetes_dataframe[diabetes_dataframe['BloodPressure'] == 0].shape[0])
print('No of missing values in SkinThickness: ', diabetes_dataframe[diabetes_dataframe['SkinThickness'] == 0].shape[0])
print('No of missing values in Insulin: ', diabetes_dataframe[diabetes_dataframe['Insulin'] == 0].shape[0])
print('No of missing values in BMI: ', diabetes_dataframe[diabetes_dataframe['BMI'] == 0].shape[0])

#replacing the missing data with mean.
diabetes_dataframe['Glucose'] = diabetes_dataframe['Glucose'].replace(0, diabetes_dataframe['Glucose'].mean())
diabetes_dataframe['BloodPressure'] = diabetes_dataframe['BloodPressure'].replace(0, diabetes_dataframe['BloodPressure'].mean())
diabetes_dataframe['SkinThickness'] = diabetes_dataframe['SkinThickness'].replace(0, diabetes_dataframe['SkinThickness'].mean())
diabetes_dataframe['Insulin'] = diabetes_dataframe['Insulin'].replace(0, diabetes_dataframe['Insulin'].mean())
diabetes_dataframe['BMI'] = diabetes_dataframe['BMI'].replace(0, diabetes_dataframe['BMI'].mean())

diabetes_dataframe.describe()

diabetes_dataframe.dtypes

print(diabetes_dataframe.columns)

#after cleaning the outliers we have 554 rows left to train the model
diabetes_dataframe.shape

diabetes_dataframe.head()

#seprating the data and labels
x=diabetes_dataframe.drop(columns="Outcome",axis=1).values
y=diabetes_dataframe["Outcome"].values

print(x)
print(y)

"""Data standarization"""

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()

#fit the scaler and transposing the data
standardized_data=scaler.fit_transform(x)
standardized_data

x=standardized_data
y=diabetes_dataframe["Outcome"]

print(x)
print(y)

"""Train test splitpyt

"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.25,stratify=y, random_state=2)

"""#**Trainning the model**

##1) Logistic regression
"""

from sklearn.linear_model import LogisticRegression
lr_model=LogisticRegression()
#trainning the logistic regression
lr_model.fit(x_train,y_train)

"""##2) K Neighbours classifier"""

from sklearn.neighbors import KNeighborsClassifier
knn_model = KNeighborsClassifier()
knn_model.fit(x_train, y_train)

"""##3) Naive Bayes classifier"""

from sklearn.naive_bayes import GaussianNB
nb_model = GaussianNB()
nb_model.fit(x_train, y_train)

"""##4) Decision Tree

"""

from sklearn.tree import DecisionTreeClassifier
dt_model = DecisionTreeClassifier()
dt_model.fit(x_train, y_train)

"""##5) support vector machine 

"""

from sklearn.svm import SVC
svm_model = SVC()
svm_model.fit(x_train, y_train)

"""##6)Random forest

"""

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(criterion='entropy')
rf_model.fit(x_train, y_train)

"""##'''Predicting & Evaluating the Models'''"""

lr_preds = lr_model.predict(x_test)

knn_preds = knn_model.predict(x_test)

nb_preds = nb_model.predict(x_test)

svm_preds = svm_model.predict(x_test)

dt_preds = dt_model.predict(x_test)

rf_preds = rf_model.predict(x_test)

#Accuracy of the models

from sklearn.metrics import accuracy_score

print('Accuracy score of Logistic Regression:', round(accuracy_score(y_test, lr_preds) * 100, 2))
print('Accuracy score of KNN:', round(accuracy_score(y_test, knn_preds) * 100, 2))
print('Accuracy score of Naive Bayes:', round(accuracy_score(y_test, nb_preds) * 100, 2))
print('Accuracy score of SVM:', round(accuracy_score(y_test, svm_preds) * 100, 2))
print('Accuracy score of Decision Tree:', round(accuracy_score(y_test, dt_preds) * 100, 2))
print('Accuracy score of Random Forest:', round(accuracy_score(y_test, rf_preds) * 100, 2))



##saving Model pickle
pickle.dump(rf_model,open('rf_model.pkl', 'wb'))

pickle.dump(scaler, open('scaler.pkl', 'wb'))

